** sch_path: /home/lmadhu/openmpw/pdk_1/Project_gf180_tp/xschem/Amplifiers/OTA_2stage.sch

**.subckt OTA_2stage vout vin1 vin2 vdd vss vp

*.opin vout

*.ipin vin1

*.ipin vin2

*.iopin vdd

*.iopin vss

*.ipin vp



*W=1800um,L=1um,(W=100um,L=1um=18)

XM1 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM2 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1





XM11 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM12 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM13 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM14 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM15 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM16 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM17 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM18 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM19 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM20 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM21 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM22 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1





XM23 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM24 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM25 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM26 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM27 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM28 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM29 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM30 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM31 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM32 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM33 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM34 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM35 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM36 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM37 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM38 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1





XM39 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM40 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM41 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM42 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM43 vx vin1 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM44 net1 vin2 vtail vss nfet_03v3 L=1u W=100u nf=500 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1










XM3 vx vx vdd vdd pfet_03v3 L=2u W=50u nf=50 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM4 net1 vx vdd vdd pfet_03v3 L=2u W=50u nf=50 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1



XM5 vtail vbias_tail vss vss nfet_03v3 L=1u W=60u nf=60 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1







XM6 vbias_tail vbias_tail vss vss nfet_03v3 L=1u W=20u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

V1 vdd GND 3.3

.save i(v1)

V2 vss GND 0

.save i(v2)

V3 vin1 GND dc 1.4 ac 1 SIN(1.4 10m 10MEG 0)
*PULSE(1.4 1 0 1ns 1ns 200ns 400ns)
*SIN(1.4 10m 30MEG 0)

.save i(v3)

V4 vin2 GND dc 1.4 ac 0 SIN(1.4 -10m 10MEG 0)
*PULSE(1.4 1 0 1ns 1ns 200ns 400ns)
*SIN(1.4 -10m 30MEG 0)

.save i(v4)

XM7 vbias_tail vp vdd vdd pfet_03v3 L=2u W=10u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

V5 vp GND dc 0 
*PULSE(3.3 0 0 10ns 10ns 800ns 1000ns)
*PULSE(2 3.3 0 1ns 1ns 200ns 1000ns)

.save i(v5)


*W/L = 700um/1u (m=7)

XM9 vout vbias_tail vss vss nfet_03v3 L=1u W=100u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1







XM50 vout vbias_tail vss vss nfet_03v3 L=1u W=100u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM51 vout vbias_tail vss vss nfet_03v3 L=1u W=100u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM52 vout vbias_tail vss vss nfet_03v3 L=1u W=100u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM53 vout vbias_tail vss vss nfet_03v3 L=1u W=100u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM54 vout vbias_tail vss vss nfet_03v3 L=1u W=100u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM58 vout vbias_tail vss vss nfet_03v3 L=1u W=100u nf=1 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1







*W/L = 400um/700nm (m=4)

XM10 vout net1 vdd vdd pfet_03v3 L=0.7u W=100u nf=5 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM55 vout net1 vdd vdd pfet_03v3 L=0.7u W=100u nf=5 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM56 vout net1 vdd vdd pfet_03v3 L=0.7u W=100u nf=5 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1

XM57 vout net1 vdd vdd pfet_03v3 L=0.7u W=100u nf=5 ad='int((nf+1)/2) * W/nf * 0.18u' as='int((nf+2)/2) * W/nf * 0.18u'

+ pd='2*int((nf+1)/2) * (W/nf + 0.18u)' ps='2*int((nf+2)/2) * (W/nf + 0.18u)' nrd='0.18u / W' nrs='0.18u / W'

+ sa=0 sb=0 sd=0 m=1







C3 vout GND 1p m=1

C2 net2 vout 3p m=1

R1 net1 net2 200 m=1



**** begin user architecture code





*.op



*.dc v5 0 3.3 0.05



*.tran 1ns 1000ns 0



*.ac dec 10 1 1000G



*.noise v(net1) v3 dec 100 1K 200MEG 1



.save @m.xm9.m0[id]

.save @m.xm10.m0[id]

.save @m.xm7.m0[id]

.save @m.xm6.m0[id]

.save @m.xm5.m0[id]

.save @m.xm4.m0[id]

.save @m.xm3.m0[id]

.save @m.xm2.m0[id]

.save @m.xm1.m0[id]



.save @m.xm10.m0[vth]

.save @m.xm10.m0[gm]

.save @m.xm10.m0[gds]





.save @m.xm7.m0[vth]

.save @m.xm7.m0[gm]

.save @m.xm7.m0[gds]

.save @m.xm6.m0[vth]

.save @m.xm6.m0[gm]

.save @m.xm6.m0[gds]

.save @m.xm5.m0[vth]

.save @m.xm5.m0[gm]

.save @m.xm5.m0[gds]

.save @m.xm4.m0[vth]

.save @m.xm4.m0[gm]

.save @m.xm4.m0[gds]

.save @m.xm3.m0[vth]

.save @m.xm3.m0[gm]

.save @m.xm3.m0[gds]

.save @m.xm2.m0[vth]

.save @m.xm2.m0[gm]

.save @m.xm2.m0[gds]

.save @m.xm1.m0[vth]

.save @m.xm1.m0[gm]

.save @m.xm1.m0[gds]

.save all

.control

run

print @m.xm10.m0[vth]

print @m.xm10.m0[gm]

print @m.xm10.m0[id]

print @m.xm10.m0[gds]



print @m.xm9.m0[vth]

print @m.xm9.m0[gm]

print @m.xm9.m0[id]

print @m.xm9.m0[gds]



print @m.xm8.m0[vth]

print @m.xm8.m0[gm]

print @m.xm8.m0[id]

print @m.xm8.m0[gds]



print @m.xm7.m0[vth]

print @m.xm7.m0[gm]

print @m.xm7.m0[id]

print @m.xm7.m0[gds]



print @m.xm6.m0[vth]

print @m.xm6.m0[gm]

print @m.xm6.m0[id]

print @m.xm6.m0[gds]



print @m.xm5.m0[vth]

print @m.xm5.m0[gm]

print @m.xm5.m0[id]

print @m.xm5.m0[gds]



print @m.xm4.m0[vth]

print @m.xm4.m0[gm]

print @m.xm4.m0[id]

print @m.xm4.m0[gds]



print @m.xm3.m0[vth]

print @m.xm3.m0[gm]

print @m.xm3.m0[id]

print @m.xm3.m0[gds]



print @m.xm2.m0[vth]

print @m.xm2.m0[gm]

print @m.xm2.m0[id]

print @m.xm2.m0[gds]



print @m.xm1.m0[vth]

print @m.xm1.m0[gm]

print @m.xm1.m0[id]

print @m.xm1.m0[gds]



print @m.xm7.m0[vth]

print @m.xm7.m0[gm]

print @m.xm7.m0[id]

print @m.xm7.m0[gds]



*setplot noise1

*plot inoise_spectrum

*plot vdb(vout) xlog

*plot {57.29*vp(vout)}-180 xlog 

*plot vx vtail vbias_tail 

plot vout 

let a = 0.5

let b = 0

let step = 0.1

let final = 2

let test = a

let test1 = a

let cnt = 0

let ind = ((final-a)/step)

let n = vector(ind)

let power = vector(ind)



set color0 = white

set color1 = black

set hcopydevtype = svg

setcs svg_stropts = ( black Arial Arial )



set gain = ' '

set phasedeg = ' '

set tranout = ' '

set gain_cm = ' '

set nolegend



while test le final

alter @v5[dc] = test

print @v5[dc]

let test = test + step

ac dec 10 1 300MEG

let phase = {57.29*vp(vout)}-180

set gain = ( $gain db({$curplot}.vout) )

set phasedeg = ( $phasedeg ({$curplot}.phase) )

end


plot $gain xlabel Frequency(Hz) ylabel Gain(db) title Gain(dB)

plot $phasedeg xlabel Frequency(Hz) ylabel Phase(deg) title Phase(deg)



hardcopy Gain.svg $gain label Frequency(Hz) ylabel Gain(db) title 'OTA_2stage Gain'

hardcopy Phase.svg $phasedeg xlabel Frequency(Hz) ylabel Phase(deg) title 'OTA_2stage Phase'


while test le final

alter @v5[dc] = test

print @v5[dc]

alter @v4[ac] = 1

let test = test + step

ac dec 10 1 1000MEG

set gain_cm = ( $gain_cm db({$curplot}.vout) )

end


plot $gain_cm xlabel Frequency(Hz) ylabel Gain(db) title Gain_cm(dB)









let test = a

while test le final

alter @v5[dc] = test

print @v5[dc]

let test = test + step

tran 1ns 500ns 0

set tranout = ( $tranout ({$curplot}.vout) )

end





plot $tranout xlabel Time(ns) ylabel Output(V) title Output_Signal



hardcopy Transient.svg $tranout xlabel Time(ns) ylabel Output title 'OTA_2stage Transient Plot'



*print vout vtail vbias_tail vx



*plot @m.xm5.m0[id] @m.xm9.m0[id]

*plot vbias_tail vtail vx vout


while test1 le final

alter @v5[dc] = test1

print @v5[dc]

save all

let ic = @m.xm5.m0[id] + @m.xm6.m0[id] + @m.xm9.m0[id]

let power[cnt] = 3.3*ic

let test1 = test1 + step

noise v(vout) v3 dec 100 20K 2MEG 1

let n[cnt] = inoise_total

let cnt = cnt + 1

end



plot n vs power xlabel Power(mW) ylabel Integrated_Noise(uV) title Integrated_Noise



hardcopy Noise.svg n vs power xlabel Power(mW) ylabel Integrated_Noise(uV) title 'OTA_2stage Integrated_Noise'





.endc





.lib /home/lmadhu/openmpw/pdk_1/gf180mcuA/libs.tech/ngspice/sm141064.ngspice typical



.include /home/lmadhu/openmpw/pdk_1/gf180mcuA/libs.tech/ngspice/design.ngspice

.param  sw_stat_mismatch = 0



**** end user architecture code

**.ends

.GLOBAL GND

.end
