# SPDX-FileCopyrightText: 2020 Efabless Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0

# Power nets
# set ::power_nets $::env(_VDD_NET_NAME)
# set ::ground_nets $::env(_GND_NET_NAME)

# if { $::env(CONNECT_GRIDS) } {
# 	pdngen::specify_grid stdcell {
# 	    name grid
# 		core_ring {
# 			met5 {width $::env(_WIDTH) spacing $::env(_SPACING) core_offset $::env(_H_OFFSET)}
# 			met4 {width $::env(_WIDTH) spacing $::env(_SPACING) core_offset $::env(_V_OFFSET)}
# 		}
# 		rails {
# 		    met1 {width $::env(FP_PDN_RAIL_WIDTH)  offset $::env(FP_PDN_RAIL_OFFSET)}
# 	    }
# 	    straps {
# 		    met4 {width $::env(_WIDTH) pitch $::env(_V_PITCH) offset $::env(_V_PDN_OFFSET)}
# 		    met5 {width $::env(_WIDTH) pitch $::env(_H_PITCH) offset $::env(_H_PDN_OFFSET)}
# 	    }
# 	    connect {{met1 met4} {met4 met5}}
# 	}
# } else {
# 	pdngen::specify_grid stdcell {
# 	    name grid
# 		core_ring {
# 			met5 {width $::env(_WIDTH) spacing $::env(_SPACING) core_offset $::env(_H_OFFSET)}
# 			met4 {width $::env(_WIDTH) spacing $::env(_SPACING) core_offset $::env(_V_OFFSET)}
# 		}
# 		rails {
# 		    met1 {width $::env(FP_PDN_RAIL_WIDTH)  offset $::env(FP_PDN_RAIL_OFFSET)}
# 	    }

# 	    connect {{met4 met5}}
# 	}
# }

# pdngen::specify_grid macro {
# 	instance "obs_core_obs"
#     power_pins $::env(_VDD_NET_NAME)
#     ground_pins $::env(_GND_NET_NAME)
#     blockages "li1 met1 met2 met3 met4 met5"
#     straps {
#     }
#     connect {}
# }

# if { $::env(CONNECT_GRIDS) } {
# 	pdngen::specify_grid macro {
# 	    orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
# 	    power_pins "VPWR"
# 	    ground_pins "VGND"
# 	    blockages "li1 met1 met2 met3 met4"
# 	    straps {
# 	    }
# 	    connect {{met4_PIN_ver met5}}
# 	}
# } else {
# 	pdngen::specify_grid macro {
# 	    orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
# 	    power_pins "VPWR"
# 	    ground_pins "VGND"
# 	    blockages "li1 met1 met2 met3 met4"
# 	    straps {
# 	    }
# 	    connect {}
# 	}
# }

# set ::halo 5

# # POWER or GROUND #Std. cell rails starting with power or ground rails at the bottom of the core area
# set ::rails_start_with "POWER" ;

# # POWER or GROUND #Upper metal stripes starting with power or ground rails at the left/bottom of the core area
# set ::stripes_start_with "POWER" ;


# Floorplan information - core boundary coordinates, std. cell row height,
# minimum track pitch as defined in LEF


# Power nets
# set ::power_nets "VDD"
# set ::ground_nets "VSS"
####################################
# global connections
####################################


# set pdngen::global_connections {
#   VDD {
#     {inst_name .* pin_name VPWR}
#     {inst_name .* pin_name VPB}
#   }
#   VSS {
#     {inst_name .* pin_name VGND}
#     {inst_name .* pin_name VNB}
#   }
# }
##===> Power grid strategy
# Ensure pitches and offsets will make the stripes fall on track
add_global_connection -defer_connection -net {VDD} -inst_pattern {.*} -pin_pattern {^VDD$} -power
add_global_connection -defer_connection -net {VDD} -inst_pattern {.*} -pin_pattern {^VDDPE$}
add_global_connection -defer_connection -net {VDD} -inst_pattern {.*} -pin_pattern {^VDDCE$}
add_global_connection -defer_connection -net {VDD} -inst_pattern {.*} -pin_pattern {VPWR}
add_global_connection -defer_connection -net {VDD} -inst_pattern {.*} -pin_pattern {VPB}
add_global_connection -defer_connection -net {VSS} -inst_pattern {.*} -pin_pattern {^VSS$} -ground
add_global_connection -defer_connection -net {VSS} -inst_pattern {.*} -pin_pattern {^VSSE$}
add_global_connection -defer_connection -net {VSS} -inst_pattern {.*} -pin_pattern {VGND}
add_global_connection -defer_connection -net {VSS} -inst_pattern {.*} -pin_pattern {VNB}

# ####################################
# # voltage domains
# ####################################
# # set_voltage_domain -name {CORE} -power {VDD} -ground {VSS}
# # ####################################
# pdngen::specify_grid stdcell {
#     name grid
#     core_ring {
#      	met4 {width 4.2 spacing 1.6 core_offset 4.1}
#         met5 {width 4.2 spacing 1.6 core_offset 4.1}
#         }
#         straps{
#         }
#     connect {{met1 met4} {met4 met5}}
# }

#     straps {
#         met4 {width 1.600 pitch 80 offset 13.570 extend_to_core_ring 1}
#         met5 {width 1.600 pitch 80 offset 13.600 extend_to_core_ring 1}
#     }

# # pdngen::specify_grid macro {
#     orient {R0 R180 MX MY}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     connect {{met4 met5}}
# }

# # Need a different strategy for rotated rams to connect to rotated pins
# # No clear way to do this for a 5 metal layer process
# pdngen::specify_grid macro {
#     instance "u_DCDC_CLKGATE"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }

# pdngen::specify_grid macro {
#     instance "u_DCDC_FF"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }
# pdngen::specify_grid macro {
#     instance "u_DCDC_INVERTER"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }


# pdngen::specify_grid macro {
#     instance "u_NOISE_INJECTION"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }

# pdngen::specify_grid macro {
#     instance "u_DCDC_DAC"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }

# pdngen::specify_grid macro {
#     instance "u_DCDC_COMP"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }

# pdngen::specify_grid macro {
#     instance "u_NON_CLK_GEN"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }

# pdngen::specify_grid macro {
#     instance "u_DCDC_SIX_STAGES_CONV"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }

# pdngen::specify_grid macro {
#     instance "u_dcdc_config"
#     orient {R0 R180 MX MY R90 R270 MXR90 MYR90}
#     power_pins "VPWR"
#     ground_pins "VGND"
#     blockages "li1 met1 met2 met3 met4"
# 	straps {
# 	}
#     connect {{met1 met4} {met4 met5}}
# }

####################################
# standard cell grid
####################################
# define_pdn_grid -name {grid} -voltage_domains {CORE}
# add_pdn_ring -grid {grid} -layer {met4 met5} -width {12} -spacing {2} -core_offset {0}
# add_pdn_stripe -grid {grid} -layer {met1} -width {0.48} -offset {0} -extend_to_core_ring -followpins
# add_pdn_stripe -grid {grid} -layer {met1} -width {0.48} -offset {0} -followpins -extend_to_core_ring
# add_pdn_stripe -grid {grid} -layer {met4} -width {1.600} -pitch {27.140} -offset {13.570} -extend_to_core_ring -snap_to_grid
# add_pdn_stripe -grid {grid} -layer {met5} -width {1.600} -pitch {27.200} -offset {13.600} -extend_to_core_ring -snap_to_grid
# add_pdn_connect -grid {grid} -layers {met1 met4}
# add_pdn_connect -grid {grid} -layers {met4 met5}
####################################
# macro grids
####################################
####################################
# # grid for: CORE_macro_grid_1
# ####################################
# define_pdn_grid -name {CORE_macro_grid_1} -voltage_domains {CORE} -macro -orient {R0 R180 MX MY} -halo {2.0 2.0 2.0 2.0} -default -grid_over_boundary
# add_pdn_connect -grid {CORE_macro_grid_1} -layers {met4 met5}
# # ####################################
# # # grid for: CORE_macro_grid_2
# # ####################################
# define_pdn_grid -name {CORE_macro_grid_2} -voltage_domains {CORE} -macro -orient {R90 R270 MXR90 MYR90} -halo {2.0 2.0 2.0 2.0} -default -grid_over_boundary
# add_pdn_connect -grid {CORE_macro_grid_2} -layers {met4 met5}


# # POWER or GROUND #Std. cell rails starting with power or ground rails at the bottom of the core area
# set ::rails_start_with "POWER" ;

# # POWER or GROUND #Upper metal stripes starting with power or ground rails at the left/bottom of the core area
# set ::stripes_start_with "POWER" ;

# Power nets
set ::power_nets "VDD"
set ::ground_nets "VSS"


##===> Power grid strategy
# Ensure pitches and offsets will make the stripes fall on track

# pdngen::specify_grid stdcell {
#     name grid
#     straps {
#         met4 {width 0.96 pitch 56.0 offset 2}
#         met5 {width 1.60 pitch 56.0 offset 2}
#     }
#     connect {{met4 met5}}
# }

pdngen::specify_grid macro {
    orient {R0 R180 MX MY}
    power_pins "VPWR"
    ground_pins "VGND"
    blockages "met1 met2 met3 met4"
    straps {
    }
    connect {{met4_PIN_ver met5} {met4 met5}}
}

global_connect
